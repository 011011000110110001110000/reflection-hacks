buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group = 'com.github.011011000110110001110000'
version = '1.0'

repositories {
    mavenCentral()
}

java {
    withSourcesJar()
}

shadowJar {
    archiveClassifier = 'shadow-jar'
    relocate 'org.objectweb.asm', 'lib.org.objectweb.asm'
}

shadowJar.dependsOn(tasks.sourcesJar)

publishing {
    publications {
        shadow(MavenPublication) {
            from components.java
        }

        jar(MavenPublication) {
            from components.java
        }
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.0.1'
    implementation 'org.ow2.asm:asm:9.5'

    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
}

test {
    useJUnitPlatform()
}

tasks.register('testSupportedVersions', Test) {
    group 'verification'
    doFirst {
        println 'Running tests on all supported JDK versions'
    }
}

LinkedHashMap<JvmVendorSpec, JvmImplementation> vendors = [:]

vendors[JvmVendorSpec.ADOPTIUM] = JvmImplementation.VENDOR_SPECIFIC
vendors[JvmVendorSpec.ADOPTOPENJDK] = JvmImplementation.VENDOR_SPECIFIC
vendors[JvmVendorSpec.AMAZON] = JvmImplementation.VENDOR_SPECIFIC
vendors[JvmVendorSpec.AZUL] = JvmImplementation.VENDOR_SPECIFIC
vendors[JvmVendorSpec.BELLSOFT] = JvmImplementation.VENDOR_SPECIFIC
vendors[JvmVendorSpec.IBM] = JvmImplementation.J9
vendors[JvmVendorSpec.MICROSOFT] = JvmImplementation.VENDOR_SPECIFIC
vendors[JvmVendorSpec.ORACLE] = JvmImplementation.VENDOR_SPECIFIC
vendors[JvmVendorSpec.SAP] = JvmImplementation.VENDOR_SPECIFIC

def versionRange = (17..21)

vendors.forEach {
    jvmVendorSpec, jvmImplementation ->
        versionRange.each {
            majorVersion ->
                def javaLauncherProvider = javaToolchains.launcherFor {
                    languageVersion = JavaLanguageVersion.of(majorVersion)
                    vendor = jvmVendorSpec
                    implementation = jvmImplementation
                }
                def taskName = "testJDK${majorVersion}_${jvmVendorSpec}"
                def javaLauncher
                def versionSpecificTask
                try {
                    javaLauncher = javaLauncherProvider.get()
                    versionSpecificTask = tasks.register(taskName, Test) {
                        executable = javaLauncher.executablePath

                        description = "Runs the test suite on JDK ${majorVersion} for vendor ${jvmVendorSpec}"
                        group = LifecycleBasePlugin.VERIFICATION_GROUP

                        def testTask = tasks.test
                        classpath = testTask.classpath
                        testClassesDirs = testTask.testClassesDirs
                        version = majorVersion

                        useJUnitPlatform()
                        testLogging {
                            events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
                        }

                        doFirst {
                            println "Running test suite on JDK ${majorVersion} for vendor ${jvmVendorSpec}"
                        }
                    }
                } catch (e) {
                    versionSpecificTask = tasks.register(taskName, Test) {
                        onlyIf {
                            println "Skipping tests on JDK ${majorVersion} for vendor ${jvmVendorSpec}:\n${e.message}"
                            false
                        }
                    }
                }

                tasks.testSupportedVersions.finalizedBy {
                    versionSpecificTask
                }
        }
}

tasks.withType(Test).configureEach {
    dependsOn {
        tasks.named("clean${name.capitalize()}")
    }
}